plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.42-beta'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    // Registrate
    maven {
        url "https://maven.ithundxr.dev/snapshots"
    }
    // JEI
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    // Jade
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    // Ponder
    maven {
        url = "https://maven.createmod.net"
    }
    // KubeJS
    maven {
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    // Patchouli
    maven {
        url = 'https://maven.blamejared.com'
    }
    maven {
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven"
    }
}

dependencies {
    // JEI
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")
    // JER
    implementation files("libs/JustEnoughResources-NeoForge-1.21.1-1.6.0.jar")
    // Jade
    implementation("curse.maven:jade-324717:${jade_file_id}")
    // KubeJS
    implementation("curse.maven:kubejs-238086:${kubejs_file_id}")
    implementation("curse.maven:rhino-416294:${rhino_file_id}")
    implementation("curse.maven:probejs-585406:${probejs_file_id}")
    // GeckoLib
    implementation("curse.maven:geckolib-388172:${geckolib_file_id}")
    // ZeroCore2
    implementation("curse.maven:zerocore2-247921:${zerocore2_file_id}")
    // Patchouli
    compileOnly("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly("vazkii.patchouli:Patchouli:${patchouli_version}")
    // Ponder
    implementation jarJar("net.createmod.ponder:Ponder-NeoForge-${minecraft_version}:${ponder_version}")
    // Registrate
    implementation jarJar(group: 'com.tterrag.registrate', name: 'Registrate', version: "[${registrate_version},)")
}

base {
    archivesName = mod_name - mod_version
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
tasks.processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = "utf-8"
}
tasks.withType(Javadoc).configureEach {
    options.encoding = "utf-8"
}